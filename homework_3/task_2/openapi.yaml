# Решение задания преведено в методичке (смысл задания?)
openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer # чтобы не потерять точность, денежные поля мы будем передавать
          format: int64 # в виде целочисленного значения минимальной размерности валюты (например, центы или копейки)
        image_link:
          type: string

# Добавить в спецификацию объект Order (заказ)
    Order:
      type: object
      properties:
        idOrder:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        orderDate:
          type: string
          format: date
        status:
          type: string
          description: Order Status
          enum:
            - approved
            - delivered
        complete:
          type: boolean

  securitySchemes:
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"

tags:
  - name: user
    description: Operations about User
  - name: item
    description: Everything about your Item
  - name: order
    description: Access to shope orders

    
paths:
  /user/login:
    post:
      tags:
        - user
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The user password for login
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      tags:
        - item
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      description: "Item object that needs to be added to the store"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/Item'

      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []

# 1. Добавить параметры для фильтрации товаров по диапазону цены    
    get:
      tags:
        - item
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
      
  /items/upload_image:
    post:
      tags:
        - item
      summary: "uploads an image"
      operationId: "uploadFile"
      description: "Additional data to pass to server"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                fileName:
                  description: "file to upload"
                  type: string
                  format: binary
                  
      responses:
        201:
          description: "file uploaded"
      security:
      - api_key: []

  /items/{itemId}:
    get:
      tags:
        - item
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      tags:
        - item
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
    delete:
      tags:
        - item
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
      - api_key: []

  /orders:
# d. Получение списка заказов с сортировкой по дате GET:/order (требует авторизации)
# не уверен в правильности решения прошу поправить если что не так!
    get:
      tags:
      - order
      summary: Lists Orders with filters
      operationId: ListOrders
      parameters:
        - name: date_sort
          in: query
          description: Sorted by date
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: Invalid price range
          content: { }
      security:
        - api_key: []
# a. Добавление нового заказа POST:/order
    post:
      tags:
      - order
      summary: Add a new order to the store
      operationId: placeOrder
      requestBody:
        description: Order to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}:
# c. Получение заказа по ID GET:/order/{id} (требует авторизации)
    get:
      tags:
        - order
      summary: Find purchase order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
      security:
        - api_key: []
# b. Редактирование заказа по ID PUT:/order/{id} (требует авторизации)
    put:
      tags:
        - order
      summary: Edit order
      operationId: editOrderWithForm
      parameters:
        - name: idOrder
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                itemId:
                  type: integer
                  format: int64 
                  description: ItemId of order that needs to be updated
                quantity:
                  type: integer
                  format: int32
                  description: Quantity of order that needs to be updated
                orderDate:
                  type: string
                  format: date
                  description: OrderDate of order that needs to be updated
                status:
                  type: string
                  description: OrderStatus of order that needs to be updated
                complete:
                  type: boolean
                  description: Complete of order that needs to be updated
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: []
